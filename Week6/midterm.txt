1.a)

/*****************************************************/
// Function: triangleArea
//
// Description: given a base and a height, this function 
//              calculates the area of the triangle
//
// Parameters: float height - the height of the triangle
//            float base - the length of the longest side 
//
// Returns: area of the triangle
/******************************************************/

float triangleArea(float height, float base)
{
    float area;

    area = (height * base) * .5;

    return area;
}


1.b)

/*****************************************************/
// Function: trianglePerimeter
//
// Description: given the 3 sides of the triangle, this 
//              function calculates the perimeter of the 
//              triangle            
//
// Parameters: sideA, sideB and sideC
//
// Returns: perimeter of the triangle
/******************************************************/

float trianglePerimeter(float sideA, float sideB, float sideC)
{
    float perimeter;

    perimeter = sideA + sideB + sideC;

    return perimeter;
}
______________________________________________________________________________


2)

/*****************************************************/
// Function: frequency
//
// Description: takes in the first n number of elements in and
//              returns how many times another number x occurs 
//              in the array.          
//
// Parameters: theArray[] - an array of numbers to be looped through
//             x - the number we are looking for in the array
//             n - the number of elements the function is looping through
//
// Returns: count - the number of times x is found in the first n elements
/******************************************************/

int frequency (int theArray [], int n, int x)
{
    int count = 0;      // increases for number of time n is in array
    int idx;            //index of array

    for (idx = 0; idx < n; ++idx)
    {
        if (theArray[idx] == x)
            {
                count += 1;
            }
    }

    return count;
}

_________________________________________________________________________________


3.a)

/*****************************************************/
// Function: max
//
// Description: takes in 5 numbers and returns the largest number          
//
// Parameters: v, w, x, y, z - 5 numbers input to function
//
// Returns: largest - the biggest number in the set 
/******************************************************/

int max (int v, int w, int x, int y, int z)
{
    int largest = 0;
    int array[5] = {v, w, x, y, z};
    int idx;

    for (idx = 0; idx < 5; ++idx)
    {
        if (array[idx] > largest)
            largest = array[idx];
    }

    return largest;
      
}

3.b)

I think this syntax is correct, but I couldn't get the code to work.

max = (v > w ? v > x ? v > y ? v > z ? v :
    (w > x ? w > y ? w < z ? w :
    (x > y ? x > z ? x :
    (y > z ? y : z) : 0);
____________________________________________________________________________________

4)

/*****************************************************/
// Function: testGrade()
//
// Description: takes in a numerical test score and converts it into a
//               letter grade          
//
// Parameters: testScore - the numerical score the student recieved
//
// Returns: none - prints the result to the console. I tried to get This
//                 function to return the letterGrade but it kept returning 
//                 an integer value instead of the letter.
/******************************************************/

char testGrade(int testScore)
{

    char letterGrade;

    if (testScore >= 90 && testScore <= 100)
        letterGrade = 'A';
        else if (testScore >= 80 && testScore <= 89)
            letterGrade = 'B';
            else if (testScore >= 70 && testScore <= 79)
                letterGrade = 'C';
                else if (testScore >= 60 && testScore <= 69)
                    letterGrade = 'D';
                    else if (testScore >= 0 && testScore <= 59)
                        letterGrade = 'F';
    else
        letterGrade = 'I';


    printf("%c\n", letterGrade);

}

_____________________________________________________________________________________________________________

5) ***************redo this one*****************

/*****************************************************/
// Function: gradesTotal()
//
// Description: takes an array of letter grades and prints out how many of each letter
//              are contained in the array.          
//
// Parameters: charGrades[] - an array of letter grades
//             int lenth - the length of the array to pass to the for loop
//
// Returns: none - prints the result to the console.
/******************************************************/

int gradesTotal(char grades[], int length)
    {
    int idx; // index
    int a = 0; 
    int b = 0;
    int c = 0;
    int d = 0;
    int f = 0;
    int i = 0;

    for (idx = 0; idx < length; ++idx)
        {
            if (grades[idx] == 'a' || grades[idx] == 'A')
                a += 1;
                else if (grades[idx] == 'b' || grades[idx] == 'B')
                    b += 1;
                    else if (grades[idx] == 'c' || grades[idx] == 'C')
                        c += 1;
                        else if (grades[idx] == 'd' || grades[idx] == 'D')
                            d += 1;
                            else if (grades[idx] == 'f' || grades[idx] == 'F')
                                f += 1;
                                else
                                    i += 1;
            }

    printf("In this array, there are %i A's, %i B's, %i C's, %i D's, %i F's and %i grades were invalid.", a, b, c, d, f, i);
    

    }