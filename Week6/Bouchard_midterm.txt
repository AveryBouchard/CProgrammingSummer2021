1.a)

/*****************************************************/
// Function: triangleArea
//
// Description: given a base and a height, this function 
//              calculates the area of the triangle
//
// Parameters: float height - the height of the triangle
//            float base - the length of the longest side 
//
// Returns: area of the triangle
/******************************************************/

float triangleArea(float height, float base)
{
    float area;

    area = (height * base) * .5;

    return area;
}


1.b)

/*****************************************************/
// Function: trianglePerimeter
//
// Description: given the 3 sides of the triangle, this 
//              function calculates the perimeter of the 
//              triangle            
//
// Parameters: sideA, sideB and sideC
//
// Returns: perimeter of the triangle
/******************************************************/

float trianglePerimeter(float sideA, float sideB, float sideC)
{
    float perimeter;

    perimeter = sideA + sideB + sideC;

    return perimeter;
}
______________________________________________________________________________


2)

/*****************************************************/
// Function: frequency
//
// Description: takes in the first n number of elements in and
//              returns how many times another number x occurs 
//              in the array.          
//
// Parameters: theArray[] - an array of numbers to be looped through
//             x - the number we are looking for in the array
//             n - the number of elements the function is looping through
//
// Returns: count - the number of times x is found in the first n elements
/******************************************************/

int frequency (int theArray [], int n, int x)
{
    int count = 0;      // increases for number of time n is in array
    int idx;            //index of array

    for (idx = 0; idx < n; ++idx)
    {
        if (theArray[idx] == x)
            {
                count += 1;
            }
    }

    return count;
}

_________________________________________________________________________________


3.a)

/*****************************************************/
// Function: max
//
// Description: takes in 5 numbers and returns the largest number          
//
// Parameters: v, w, x, y, z - 5 numbers input to function
//
// Returns: largest - the biggest number in the set 
/******************************************************/

int max (int v, int w, int x, int y, int z)
{
    int largest = 0;
    int array[5] = {v, w, x, y, z};
    int idx;

    for (idx = 0; idx < 5; ++idx)
    {
        if (array[idx] > largest)
            largest = array[idx];
    }

    return largest;
      
}

3.b)

I think this syntax is correct, but I couldn't get the code to work.

max = (v > w ? v > x ? v > y ? v > z ? v :
    (w > x ? w > y ? w < z ? w :
    (x > y ? x > z ? x :
    (y > z ? y : z) : 0);
____________________________________________________________________________________

4)

/*****************************************************/
// Function: testGrade()
//
// Description: takes in a numerical test score and converts it into a
//               letter grade          
//
// Parameters: testScore - the numerical score the student recieved
//
// Returns: none - prints the result to the console. I tried to get This
//                 function to return the letterGrade but it kept returning 
//                 an integer value instead of the letter.
/******************************************************/

char testGrade(int testScore)
{

    char letterGrade;

    if (testScore >= 90 && testScore <= 100)
        letterGrade = 'A';
        else if (testScore >= 80 && testScore <= 89)
            letterGrade = 'B';
            else if (testScore >= 70 && testScore <= 79)
                letterGrade = 'C';
                else if (testScore >= 60 && testScore <= 69)
                    letterGrade = 'D';
                    else if (testScore >= 0 && testScore <= 59)
                        letterGrade = 'F';
    else
        letterGrade = 'I';


    printf("%c\n", letterGrade);

}

_____________________________________________________________________________________________________________

5) 

/*****************************************************/
// Function: gradesTotal(char arrayOfGrades[], int lengthOfArray)
//
// Description: takes an array of letter grades and prints out how many of each letter
//              are contained in the array.          
//
// Parameters: charGrades[] - an array of letter grades
//             int lenth - the length of the array to pass to the for loop
//
// Returns: none - prints the result to the console.
/******************************************************/

int gradesTotal(char grades[], int length)
    {


        int grade;
        int idx; // index
        int a = 0;
        int b = 0;
        int c = 0; 
        int d = 0; 
        int f = 0;
        int i = 0;

        for (idx = 0; idx < length; ++idx)
            {grade = toupper(grades[idx]);

                switch (grade)
                {
                    case 'A':
                        a += 1;
                        printf("That was an A\n");
                        break;
                    
                    case 'B':
                        b += 1;
                        printf("That was a B\n");
                        break;

                    case 'C':
                        c += 1;
                        printf("That was a C\n");
                        break;

                    case 'D':
                        d += 1;
                        printf("That was a D\n");
                        break;

                    case 'F':
                        f += 1;
                        printf("That was an F\n");
                        break;

                    default:
                        i += 1;
                        printf("That was invalid\n");
                        break;
                }
            }

        printf("In this array, there are %i A's, %i B's, %i C's, %i D's, %i F's and %i grades were invalid.", a, b, c, d, f, i);

___________________________________________________________________________________________________________________________________

6) 

//*************************************************************
// Program: FIFA Team Stats
//
// Description: This program takes in statistics from both the team's offense and defense
//                  and prints to the console a table with expanded statistics.
//*************************************************************

#include <stdio.h>


// initialize structure for all team statistics
struct teamStats
{
    float shotsOnGoalie;
    float goalsScoredAgainst;
    float goalieGamesWon;
    float goalieGamesLost;
    float scoringAttempts;
    float goalsScoredFor;
    float teamGamesWon;
    float teamGamesLost;
};

//main function begin
int main()
{
    // function prototypes
    void defenseStats(struct teamStats blueTeam);
    void offenseStats(struct teamStats blueTeam);

    // initialize structure
    struct teamStats blueTeam =
        {5, 2, 1, 1, 7, 3, 3, 4};

    // call functions
    defenseStats(blueTeam);

    offenseStats(blueTeam);

    return 0;
} //main function end


//*****************************************************************************************
//
// Function: defenseStats()
//
// Description: Takes in various stats from the defensive side and passes into formulas
//                  which further inspect the stats to ratios
//
// Parameters: Team Structure
//                  shotsOnGoalie - the number of shots the goalie had on him/her
//                  goalsScoredAgainst - how many goals the goalie let up
//                  goalieGamesWon - how many games were won with that goalie in net
//                  goalieGamesLost - how many games were lost with that goalie in net
//
// Returns: none. Results printed to console
//
//******************************************************************************************

void defenseStats(struct teamStats blueTeam)
{

    printf("Team Defense\n__________\n\nShots on Goalie: %f\nGoals Scored Against: %f\nGoalie Wins: %f\nGoalie Losses: %f\n\n", 
        blueTeam.shotsOnGoalie, blueTeam.goalsScoredAgainst, blueTeam.goalieGamesWon, blueTeam.goalieGamesLost);

    float goalieWinPercentage = 0.0;
    float goalieSavePercentage = 0.0;
    float goalieSaveRatio = 0.0;
    float goalieSaves = 0;

    goalieWinPercentage = blueTeam.goalieGamesWon / (blueTeam.goalieGamesWon + blueTeam.goalieGamesLost);
    goalieSaves = blueTeam.shotsOnGoalie - blueTeam.goalsScoredAgainst;
    goalieSavePercentage = goalieSaves / blueTeam.shotsOnGoalie;
    goalieSaveRatio = blueTeam.shotsOnGoalie / goalieSaves;

    printf("Win Percentage: %f\nSaves: %f\nSave Percentage: %f\nSave Ratio: %f\n\n\n", 
        goalieWinPercentage, goalieSaves, goalieSavePercentage, goalieSaveRatio);

}


//*****************************************************************************************
//
// Function: offenseStats()
//
// Description: Takes in various stats from the offensive side and passes into formulas
//                  which further inspect the stats to ratios
//
// Parameters: Team Structure
//                  scoringAttempts - the number of shots the offense took
//                  goalsScoredFor - how many goals the offense scored
//                  teamGamesWon - how many games were won 
//                  teamGamesLost - how many games were lost
//
// Returns: none. Results printed to console
//
//******************************************************************************************
void offenseStats(struct teamStats blueTeam)
{
    printf("Team Offense\n____________\n\nScoring Attempts: %f\nGoals Scored For: %f\nTeam Games Won: %f\nTeam Games Lost: %f\n\n", 
        blueTeam.scoringAttempts, blueTeam.goalsScoredFor, blueTeam.teamGamesWon, blueTeam.teamGamesLost);

    float scoringPercentage = 0.0;
    float scoringRatio = 0.0;
    float gamesWonPercentage = 0.0;

    scoringPercentage = (blueTeam.scoringAttempts - blueTeam.goalsScoredFor) / blueTeam.scoringAttempts;
    scoringRatio = blueTeam.scoringAttempts/ blueTeam.goalsScoredFor;
    gamesWonPercentage = blueTeam.teamGamesWon / (blueTeam.teamGamesWon + blueTeam.teamGamesLost);

    printf("Scoring Percentage: %f\nScoring Ratio: %f\nGames Won Percentage: %f\n\n", 
        scoringPercentage, scoringRatio, gamesWonPercentage);
}

__________________________________________________________________________________________________________________

7)

//**************************************************
// Function: x_to_the_n
//
// Description: takes in 2 numbers, x and n and returns the result, 
//                  x to the power of n
//
// Parameters: x, n
//
// Returns: result - the result of x to the power of n.
//**************************************************
int x_to_the_n(int x, int n)
{
    int idx;
    long int result = x;

    for (idx = 0; idx < n-1; ++idx)
    {
        result *= x;
    }

    return result;
}

_________________________________________________________________________________________________

8)

struct name
{
    char first[30];
    char middle;
    char last[50];
};

struct date
{
    int month;
    int day;
    int year;
};

struct country
{
    char country[56];
    char nationality[20];
    char countryAbbreviation[3];
};

struct passport
{
    struct name user;
    char passportNumber[9];
    struct date birthdate;
    struct date dateOfExpiration;
    struct date dateOfIssue;
    struct country issuingCountry;
    struct country nationality;
    struct country placeOfBirth;
    char passportType[1];
    struct country countryVisited;
};