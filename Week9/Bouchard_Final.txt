1.a) Area of a Circle
    #define CIRCLEAREA(r)(3.14*((r)*(r)))

b) Macro: Area of a Square
    #define SQUAREAREA(x)((x)*(x))

c) Area of a Rectangle
    #define RECTANGLEAREA(x, y)((x)*(y))

d) Area of a Triangle
    #define TRIANGLEAREA(x, y)(((x)*(y))/2)

______________________________________________________________________________________________________________________

2) Function - words in a string

/**************************************************************
*** Function: wordsInString()
***
*** Description: Takes in a string and passes back the number 
***               of words in the striung. Uses spaces as the 
***               separator to count the number of words.
***
*** Parameters: A string with 1 or more words.
***
*** Returns: An integer with the number of words in the string.
***************************************************************/
int wordsInString(char *sentence) //passes a pointer to the sentence variable
{
    int i, //variable to hold the current character to decide whether it is a letter, a space or a Null terminator
        count = 1; //variable to hold the number of words counted

    for(i=0;sentence[i]!='\0';i++)
    {
        if (sentence[i] == ' ' && sentence[i+1] != '\0') //if the pointer is at a space, and the next character is not null terminator
            ++count;                                     //increment count variable.
    }

    return(count);
}

______________________________________________________________________________________________________________________

3)Function - Is this a valid date?

/****************************************************************
*** Function: validDate()
***
*** Description: Takes in a date and determines whether the date is a valid date.
***
*** Parameters: Pointer to a value of integer date.
***
*** Returns: None. Prints to the screen whether the date is valid or not.
***************************************************************/
void validDate(int *date)
{

    if(date[0]<1 || date[0]>12)             // checks if the month is between 1 and 12
        printf("Invalid Month");
    else if(date[1]<1 || date[1]>31)        // checks if the day number is between 1 and 31
        printf("Invalid Day");
    else if(date[2]<1)                      // checks to make sure year is not a negative number
        printf("Invalid Year");            
    else if (date[0] == 2 && date[2] % 4 == 0 && date [1] > 28) 
        printf("Invalid - Leap Year");      // if month is 2 (Feb) and the year is divisible by 4, checks if date is greater than 28 (leap year)
    else
        printf("The is a valid date");
}

______________________________________________________________________________________________________________________

4)BlackJack Hands  

#define T 10
#define J 10
#define Q 10
#define K 10

char A = 1;

....

/************************************************************
***Function: handScore()
***
***Description: returns the score of a valid BlackJack hand. 
***
***Parameters: Card1, Card2: 2 card values, between 1-9, as well as
***             T, J, Q, K, A. 
***
***Returns: Score of the hand.
*************************************************************/
int handScore(int card1, int card2)
{
    int score;

    // check to see if card1 is a valid card
    if (card1 < '1' && card1 > '9')
        if (card1 <'a' && card1 > 'z')
            if (card1 < 'A' && card1 > 'Z')
            {
                printf("This is an invaid hand, please try again.\n\n");
            }
    
    // check to see if card2 is a valid card
    if (card2 < '0' && card2 > '9')
        if (card2 <'a' && card2 > 'z')
            if (card2 < 'A' && card2 > 'Z')
            {
                printf("This is an invaid hand, please try again.\n\n");
            } 

    if (card1 > 11)
        printf("Invalid Card1");

    if (card2 > 11)
        printf("Invalid Card2");

    if (card1 == 1 && card2 == 1)
        card1 = 11;

    score = card1 + card2;

    return score;
}

______________________________________________________________________________________________________________________

5)

/************************************************************
***Function: legalWord()
***
***Description: Determines whether a word is legal or not based on if there
***                 are vowels or a Y in the word.
***
***Parameters: None. A word is input by the user.
***
***Returns: None. Output is printed to the screen.
*************************************************************/
void legalWord()
{

    int idx,            //index of the loop
        len,            //variable to store strlen() for the word
        count = 0,      //variable that holds count of the vowels
        countY = 0;     //variable that holds the count of Y
    char word[20],      //array variable to hold the word input by user
        upperLetter;    //stores the string set to upper case by toupper()

    printf("Input a word you want to check is legal: ");
    scanf("%s", word);

    len = strlen(word);     //stores an int for the length of the word

    for (idx = 0; idx < len; idx++)     //iterates through the length of the word
    {

        upperLetter = toupper(word[idx]);

        if (upperLetter == 'Y')
            countY++;
        if (upperLetter == 'A' || upperLetter == 'E' || upperLetter == 'I' ||
            upperLetter == 'O' || upperLetter == 'U')
            count++;

    }

    if (count != 0 || countY != 0)          // ensures either vowels or y are in the string
        printf("That is a legal word.");
    else
        printf("That is NOT a legal word!");

    return;
}

______________________________________________________________________________________________________________________

6)

/************************************************************
***Function: palindrome()
***
***Description: Determines whether a user input word is a palindrome. That is, 
***                 is the word, spelled backwards, the same as spelled forwards.
***
***Parameters: None. User input is taken for the string input.
***
***Returns: None. Decision is printed to the screen.
*************************************************************/
void palindrome()
{
    char string[30];    //variable to hold the string
    int idx,            //loop index
        len;            //holds length of string array
    int answer = 0;         //determines whether palindrome has been decided

    printf("Enter a string to check if it's a palindrome: \n");
    scanf("%s", string);

    len = strlen(string); //length of the string

    for(idx=0; idx<len; idx++)
    {
        if(string[idx] != string[len-idx-1])
        {
            answer = 1;
            break;
        }
    }

    if(answer)
        printf("%s is a NOT palindrome\n\n", string);
    else
        printf("%s is a palindrome\n\n", string);

    return;
}

______________________________________________________________________________________________________________________

7) String Characteristics Structure  

void getCharacteristics(struct stringCharacteristics * pointer)
{

    int idx;

    printf("Type in a string to get the characteristics (up to 100 characters): ");
    scanf("%s", &pointer->string);

    pointer->length = strlen(pointer->string);

    for (idx = 0; idx < pointer->length; idx++)
        {
            if (pointer->string[idx] >= 'A' && pointer->string[idx] <= 'Z')
                pointer->upperLetters++;

            else if (pointer->string[idx] >= 'a' && pointer->string[idx] <= 'z')
                pointer->lowerLetters++;

            else if (pointer->string[idx] >= '0' && pointer->string[idx] <= '9')
                pointer->digits++;

            else if (pointer->string[idx] == ' ')
                pointer->blankSpaces++;

            else 
                pointer->nonAlphaCharacters++;
        }

    printf("%i", pointer->upperLetters);

    return;
}

______________________________________________________________________________________________________________________

8)Baseball Stats

/************************************************************
***Function: hits()
***
***Description: Takes in singles, doubles, triples and homeruns and
***                 adds them together to get total hits.
***
***Parameters: singles, doubles, triples and homeruns.
***
***Returns: Number of total hits.
*************************************************************/
float hits(float singles, float doubles, float triples, float homeRuns)
{
    int hits = (singles + doubles + triples + homeRuns);

    return hits;
}

/************************************************************
***Function: totalBases()
***
***Description: Takes in singles, doubles, triples and homeruns and
***                 figures out total number of bases the player was on.
***
***Parameters: singles, doubles, triples and homeruns.
***
***Returns: Number of total bases.
*************************************************************/
int totalBases(float singles, float doubles, float triples, float homeRuns)
{
    int total = (singles + doubles*2 + triples*3 + homeRuns*4);

    return total;
}

/************************************************************
***Function: battingAverage()
***
***Description: Takes in singles, doubles, triples and homeruns and
***                 divides by total atBats to determine batting average.
***
***Parameters: singles, doubles, triples, homeruns and atBats.
***
***Returns: Batting Average.
*************************************************************/
float battingAverage(float singles, float doubles, float triples, float homeRuns, float atBats)
{
    int totalHits;

    totalHits = hits(singles, doubles, triples, homeRuns);
    float average = ( totalHits / atBats);

    return average;
}

/************************************************************
***Function: homeRunRatio()
***
***Description: Takes in homeruns and divides by total atBats to
***                 determine how many atBats per homerun.
***
***Parameters: homeruns and atBats.
***
***Returns: Ratio of homeruns to atBats.
*************************************************************/
float homeRunRatio(float homeRuns, float atBats)
{
    float ratio = homeRuns / atBats;

    return ratio;
}

/************************************************************
***Function: strikeOutRatio()
***
***Description: Takes in strikeouts and divides by total atBats to
***                 determine how many atBats per strikeout.
***
***Parameters: strikeOuts and atBats.
***
***Returns: Ratio of strikeouts to atBats.
*************************************************************/
float strikeOutRatio(float strikeOuts, float atBats)
{
    float ratio = strikeOuts / atBats;

    return ratio;
}

/************************************************************
***Function: onBasePercentage()
***
***Description: Determines total times on base (hits + walks + hit by pitch)
***                 then divides by total number of times the player batted.
***
***Parameters: totalHits(determined in main function by hits() function), walks,
***             hitByPitch, atBats, sacFlys.
***
***Returns: Percentage of time player got on base.
*************************************************************/
float onBasePercentage(float totalHits, float walks, float hitByPitch, float atBats, float sacFlys)
{
    float percentage = (totalHits + walks + hitByPitch) /
                        (atBats + walks + hitByPitch + sacFlys);

    return percentage;
}

/************************************************************
***Function: sluggingPercentage()
***
***Description: Takes in total bases and divides by atBats to 
***                 determine how many bases per at bat the player gets.
***
***Parameters: singles, doubles, triples, homeRuns, atBats.
***
***Returns: slugging percentage.
*************************************************************/
float sluggingPercentage(float singles, float doubles, float triples, float homeRuns, float atBats)
{
    float bases, percentage;

    bases = totalBases(singles,  doubles,  triples,  homeRuns);

    percentage = bases / atBats;

    return percentage;
}

______________________________________________________________________________________________________________________

9)Movie Structures

struct date       
{            
    int month;            
    int day;            
    int year;      
}; 

struct person
{
    char firstName[50];
    char lastName[50];
    struct date birthday;
    char role[50];
    struct movie movieAppearances [100];
};

struct cast
{
    struct person mainActor;            // the main actor
    struct person supportingActor;      // the main secondary actor
    struct person actors[20];           // up to 20 additional actors
    struct person director;             // the director of the movie
};



struct movie      
{                                   
    struct date releaseDate;    // the date the movie was released
    struct cast cast;           // the list of actors  
    int starRating;             // the number of stars (out of 5) the movie received
    char title [100];           // the title of the movie 
    char description[2000];     // a short description of the movie
    char country[50];           // country the movie was made in
    int boxOfficeEarnings;      // the amount the movie made in the theater
    char language[50];          // language the movie is in
    float budget;               // the amount the movie took to make
    struct movie similarMovies[10]; // 10 movies that are like this movie
    
};      

